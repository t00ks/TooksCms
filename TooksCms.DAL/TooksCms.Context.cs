//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TooksCms.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TooksCmsDAL : DbContext
    {
        public TooksCmsDAL()
            : base("name=TooksCmsDAL")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ArticleType> ArticleTypes { get; set; }
        public DbSet<BulletinType> BulletinTypes { get; set; }
        public DbSet<Gadget> Gadgets { get; set; }
        public DbSet<Rating> Ratings { get; set; }
        public DbSet<Rating2ArticleType2Category> Rating2ArticleType2Category { get; set; }
        public DbSet<StaticRoute> StaticRoutes { get; set; }
        public DbSet<Article> Articles { get; set; }
        public DbSet<ArticleComment> ArticleComments { get; set; }
        public DbSet<ArticleContent> ArticleContents { get; set; }
        public DbSet<ArticleImage> ArticleImages { get; set; }
        public DbSet<Bulletin> Bulletins { get; set; }
        public DbSet<BulletinContent> BulletinContents { get; set; }
        public DbSet<ContactForm> ContactForms { get; set; }
        public DbSet<Gallery> Galleries { get; set; }
        public DbSet<GalleryImage> GalleryImages { get; set; }
        public DbSet<EventLog> EventLogs { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<Tag> Tags { get; set; }
        public DbSet<AreaType> AreaTypes { get; set; }
        public DbSet<Gadget2Role2AreaType> Gadget2Role2AreaType { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Site> Sites { get; set; }
        public DbSet<PageVisit> PageVisits { get; set; }
        public DbSet<Address> Addresses { get; set; }
        public DbSet<ContactInfo> ContactInfoes { get; set; }
        public DbSet<Email> Emails { get; set; }
        public DbSet<Guest> Guests { get; set; }
        public DbSet<PhoneNumber> PhoneNumbers { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Snapshot> Snapshots { get; set; }
        public DbSet<Hotel> Hotels { get; set; }
        public DbSet<GuestGroup> GuestGroups { get; set; }
        public DbSet<FoodChoice> FoodChoices { get; set; }
        public DbSet<Guest1> Guest1 { get; set; }
    
        public virtual int DeleteRatingLinks(Nullable<int> articleTypeid, Nullable<int> categoryId)
        {
            var articleTypeidParameter = articleTypeid.HasValue ?
                new ObjectParameter("articleTypeid", articleTypeid) :
                new ObjectParameter("articleTypeid", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRatingLinks", articleTypeidParameter, categoryIdParameter);
        }
    
        public virtual ObjectResult<GadgetInfo> GetGadgetInfo(Nullable<int> roleId, Nullable<int> gadgetId, Nullable<int> areaTypeId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(int));
    
            var gadgetIdParameter = gadgetId.HasValue ?
                new ObjectParameter("gadgetId", gadgetId) :
                new ObjectParameter("gadgetId", typeof(int));
    
            var areaTypeIdParameter = areaTypeId.HasValue ?
                new ObjectParameter("areaTypeId", areaTypeId) :
                new ObjectParameter("areaTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GadgetInfo>("GetGadgetInfo", roleIdParameter, gadgetIdParameter, areaTypeIdParameter);
        }
    
        public virtual ObjectResult<ArticleInfo> GetArticleInfo(Nullable<int> articleId)
        {
            var articleIdParameter = articleId.HasValue ?
                new ObjectParameter("ArticleId", articleId) :
                new ObjectParameter("ArticleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArticleInfo>("GetArticleInfo", articleIdParameter);
        }
    
        public virtual ObjectResult<Article> SearchArticles(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Article>("SearchArticles", searchTextParameter);
        }
    
        public virtual ObjectResult<Article> SearchArticles(string searchText, MergeOption mergeOption)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Article>("SearchArticles", mergeOption, searchTextParameter);
        }
    
        public virtual ObjectResult<GalleryInfo> GetGalleryInfo(Nullable<int> galleryId)
        {
            var galleryIdParameter = galleryId.HasValue ?
                new ObjectParameter("GalleryId", galleryId) :
                new ObjectParameter("GalleryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GalleryInfo>("GetGalleryInfo", galleryIdParameter);
        }
    
        public virtual ObjectResult<CategoryInfo> SelectCategoryInfo(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoryInfo>("SelectCategoryInfo", categoryIdParameter);
        }
    
        public virtual ObjectResult<BrowserStat> GetBrowserStats()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowserStat>("GetBrowserStats");
        }
    
        public virtual ObjectResult<UniqueVisit> GetUniqueVisits(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UniqueVisit>("GetUniqueVisits", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ArticleInfo> ArticleInfoSearch(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArticleInfo>("ArticleInfoSearch", searchTextParameter);
        }
    
        public virtual int DeleteArticle(Nullable<int> articleId)
        {
            var articleIdParameter = articleId.HasValue ?
                new ObjectParameter("articleId", articleId) :
                new ObjectParameter("articleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteArticle", articleIdParameter);
        }
    
        public virtual ObjectResult<SnapshotLite> GetSnapshotLite()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SnapshotLite>("GetSnapshotLite");
        }
    }
}
